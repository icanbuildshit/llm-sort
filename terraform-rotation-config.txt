# database-rotation.tf - Multi-platform database credential rotation infrastructure

# ------------------------------------------------------
# Password Rotation Lambda (AWS Deployment)
# ------------------------------------------------------

# IAM Role for the password rotation Lambda
resource "aws_iam_role" "db_password_rotation_role" {
  name = "dynagen-${var.environment}-db-password-rotation-role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "lambda.amazonaws.com"
      }
    }]
  })
  
  tags = {
    Environment = var.environment
    Application = "dynagendashv1"
    ManagedBy   = "terraform"
  }
}

# Policy for the rotation Lambda
resource "aws_iam_policy" "db_password_rotation_policy" {
  name        = "dynagen-${var.environment}-db-password-rotation-policy"
  description = "Policy for database password rotation Lambda"
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      # CloudWatch Logs permissions
      {
        Effect = "Allow"
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Resource = "arn:aws:logs:*:*:*"
      },
      # Secrets Manager permissions
      {
        Effect = "Allow"
        Action = [
          "secretsmanager:GetSecretValue",
          "secretsmanager:PutSecretValue",
          "secretsmanager:UpdateSecret",
          "secretsmanager:DescribeSecret"
        ]
        Resource = [
          aws_secretsmanager_secret.db_credentials.arn,
          # Add any other secrets that might need to be accessed
        ]
      },
      # S3 permissions for database backups
      {
        Effect = "Allow"
        Action = [
          "s3:PutObject",
          "s3:GetObject",
          "s3:ListBucket"
        ]
        Resource = [
          "arn:aws:s3:::${var.backup_bucket_name}",
          "arn:aws:s3:::${var.backup_bucket_name}/*"
        ]
      },
      # VPC networking permissions (if Lambda runs in VPC)
      {
        Effect = "Allow"
        Action = [
          "ec2:CreateNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DeleteNetworkInterface"
        ]
        Resource = "*"
      },
      # SSM Parameter Store permissions (optional alternative to Secrets Manager)
      {
        Effect = "Allow"
        Action = [
          "ssm:GetParameter*",
          "ssm:PutParameter"
        ]
        Resource = "arn:aws:ssm:${var.region}:${data.aws_caller_identity.current.account_id}:parameter/dynagendashv1/${var.environment}/*"
      }
    ]
  })
}

# Attach the policy to the role
resource "aws_iam_role_policy_attachment" "rotation_policy_attachment" {
  role       = aws_iam_role.db_password_rotation_role.name
  policy_arn = aws_iam_policy.db_password_rotation_policy.arn
}

# Lambda function for password rotation
resource "aws_lambda_function" "db_password_rotation" {
  function_name = "dynagen-${var.environment}-db-password-rotation"
  description   = "Rotates database credentials for DynaGen system"
  
  # Lambda configuration
  runtime          = "provided.al2" # Amazon Linux 2 custom runtime for Bash
  handler          = "bootstrap"
  timeout          = 300 # 5 minutes
  memory_size      = 256
  
  # Code package (assumes you've packaged the script)
  filename         = "${path.module}/lambda/db-password-rotation.zip"
  source_code_hash = filebase64sha256("${path.module}/lambda/db-password-rotation.zip")
  
  # IAM role
  role = aws_iam_role.db_password_rotation_role.arn
  
  # VPC configuration (if needed for database access)
  dynamic "vpc_config" {
    for_each = var.lambda_in_vpc ? [1] : []
    content {
      subnet_ids         = var.private_subnet_ids
      security_group_ids = [aws_security_group.lambda_sg[0].id]
    }
  }
  
  # Environment variables
  environment {
    variables = {
      DB_HOST_TYPE        = var.db_host_type # "postgres" or "supabase"
      USE_AWS_SECRETS     = "true"
      AWS_SECRET_ID       = aws_secretsmanager_secret.db_credentials.name
      LOG_LEVEL           = "INFO"
      BACKUP_BUCKET       = var.backup_bucket_name
      NOTIFICATION_TYPE   = "sns"  # "sns" or "slack"
      SNS_TOPIC_ARN       = aws_sns_topic.rotation_notifications.arn
    }
  }
  
  tags = {
    Environment = var.environment
    Application = "dynagendashv1"
    ManagedBy   = "terraform"
  }
}

# Create a security group for the Lambda (if running in VPC)
resource "aws_security_group" "lambda_sg" {
  count       = var.lambda_in_vpc ? 1 : 0
  name        = "dynagen-${var.environment}-db-rotation-lambda-sg"
  description = "Security group for DB password rotation Lambda"
  vpc_id      = var.vpc_id
  
  # Outbound rule to the database
  egress {
    from_port   = 5432
    to_port     = 5432
    protocol    = "tcp"
    description = "PostgreSQL access"
    cidr_blocks = var.db_cidr_blocks
  }
  
  # General outbound internet access
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    description = "All outbound traffic"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  tags = {
    Environment = var.environment
    Application = "dynagendashv1"
  }
}

# CloudWatch Log Group for Lambda
resource "aws_cloudwatch_log_group" "rotation_lambda_logs" {
  name              = "/aws/lambda/dynagen-${var.environment}-db-password-rotation"
  retention_in_days = 30
  
  tags = {
    Environment = var.environment
    Application = "dynagendashv1"
  }
}

# SNS Topic for rotation notifications
resource "aws_sns_topic" "rotation_notifications" {
  name = "dynagen-${var.environment}-rotation-notifications"
  
  tags = {
    Environment = var.environment
    Application = "dynagendashv1"
  }
}

# Database credentials secret in Secrets Manager
resource "aws_secretsmanager_secret" "db_credentials" {
  name                    = "/dynagendashv1/${var.environment}/db-credentials"
  description             = "Database credentials for DynaGen Dashboard"
  recovery_window_in_days = 7
  
  tags = {
    Environment = var.environment
    Application = "dynagendashv1"
  }
}

# Initial secret value
resource "aws_secretsmanager_secret_version" "db_credentials_initial" {
  secret_id     = aws_secretsmanager_secret.db_credentials.id
  secret_string = jsonencode({
    username = var.initial_db_username
    password = var.initial_db_password
    host     = var.db_host
    port     = var.db_port
    dbname   = var.db_name
    engine   = "postgres"
    host_type = var.db_host_type
  })
}

# EventBridge rule for scheduled rotation (90 days by default)
resource "aws_cloudwatch_event_rule" "rotation_schedule" {
  name                = "dynagen-${var.environment}-db-rotation-schedule"
  description         = "Triggers database password rotation on schedule"
  schedule_expression = var.rotation_schedule # e.g., "rate(90 days)" or "cron(0 0 1 */3 ? *)" for quarterly
  
  tags = {
    Environment = var.environment
    Application = "dynagendashv1"
  }
}

# EventBridge target (Lambda function)
resource "aws_cloudwatch_event_target" "rotation_lambda_target" {
  rule      = aws_cloudwatch_event_rule.rotation_schedule.name
  target_id = "TriggerDatabaseRotation"
  arn       = aws_lambda_function.db_password_rotation.arn
}

# Permission for EventBridge to invoke Lambda
resource "aws_lambda_permission" "allow_eventbridge" {
  statement_id  = "AllowExecutionFromEventBridge"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.db_password_rotation.function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.rotation_schedule.arn
}

# ------------------------------------------------------
# Supabase-specific Configuration (Conditional)
# ------------------------------------------------------

# Supabase API key for management API (stored in Secrets Manager if db_host_type is supabase)
resource "aws_secretsmanager_secret" "supabase_api_key" {
  count                   = var.db_host_type == "supabase" ? 1 : 0
  name                    = "/dynagendashv1/${var.environment}/supabase-api-key"
  description             = "Supabase Management API Key for database operations"
  recovery_window_in_days = 7
  
  tags = {
    Environment = var.environment
    Application = "dynagendashv1"
  }
}

resource "aws_secretsmanager_secret_version" "supabase_api_key" {
  count         = var.db_host_type == "supabase" ? 1 : 0
  secret_id     = aws_secretsmanager_secret.supabase_api_key[0].id
  secret_string = var.supabase_api_key
}

# ------------------------------------------------------
# Manual Rotation Option (for CI/CD environments)
# ------------------------------------------------------

# S3 bucket to store the rotation script for CI/CD use
resource "aws_s3_bucket" "rotation_scripts" {
  bucket = "dynagen-${var.environment}-rotation-scripts"
  
  tags = {
    Environment = var.environment
    Application = "dynagendashv1"
  }
}

# S3 bucket policy for private access
resource "aws_s3_bucket_public_access_block" "rotation_scripts_access" {
  bucket = aws_s3_bucket.rotation_scripts.id
  
  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

# Upload rotation script to S3
resource "aws_s3_object" "rotation_script" {
  bucket = aws_s3_bucket.rotation_scripts.id
  key    = "db-password-rotation.sh"
  source = "${path.module}/scripts/db-password-rotation.sh"
  etag   = filemd5("${path.module}/scripts/db-password-rotation.sh")
  
  # Add script content type
  content_type = "application/x-sh"
}

# ------------------------------------------------------
# Variables
# ------------------------------------------------------

variable "environment" {
  description = "Deployment environment (e.g., dev, staging, production)"
  type        = string
}

variable "region" {
  description = "AWS region for resources"
  type        = string
  default     = "us-east-1"
}

variable "db_host_type" {
  description = "Type of database host (postgres or supabase)"
  type        = string
  default     = "postgres"
  validation {
    condition     = contains(["postgres", "supabase"], var.db_host_type)
    error_message = "db_host_type must be either 'postgres' or 'supabase'."
  }
}

variable "initial_db_username" {
  description = "Initial database username"
  type        = string
  sensitive   = true
}

variable "initial_db_password" {
  description = "Initial database password"
  type        = string
  sensitive   = true
}

variable "db_host" {
  description = "Database host address"
  type        = string
}

variable "db_port" {
  description = "Database port"
  type        = number
  default     = 5432
}

variable "db_name" {
  description = "Database name"
  type        = string
}

variable "backup_bucket_name" {
  description = "S3 bucket name for database backups"
  type        = string
  default     = "dynagen-db-backups"
}

variable "rotation_schedule" {
  description = "Schedule expression for password rotation"
  type        = string
  default     = "rate(90 days)" # Every 90 days
}

variable "lambda_in_vpc" {
  description = "Whether the Lambda function should run in a VPC"
  type        = bool
  default     = true
}

variable "vpc_id" {
  description = "VPC ID for Lambda function (if lambda_in_vpc is true)"
  type        = string
  default     = ""
}

variable "private_subnet_ids" {
  description = "List of private subnet IDs for Lambda function (if lambda_in_vpc is true)"
  type        = list(string)
  default     = []
}

variable "db_cidr_blocks" {
  description = "CIDR blocks for database access from Lambda"
  type        = list(string)
  default     = ["0.0.0.0/0"] # Should be restricted in production
}

variable "supabase_api_key" {
  description = "Supabase Management API Key (only needed if db_host_type is supabase)"
  type        = string
  sensitive   = true
  default     = ""
}

# ------------------------------------------------------
# Outputs
# ------------------------------------------------------

output "rotation_lambda_arn" {
  description = "ARN of the database password rotation Lambda function"
  value       = aws_lambda_function.db_password_rotation.arn
}

output "db_credentials_secret_arn" {
  description = "ARN of the database credentials secret"
  value       = aws_secretsmanager_secret.db_credentials.arn
}

output "rotation_script_s3_uri" {
  description = "S3 URI of the rotation script for CI/CD use"
  value       = "s3://${aws_s3_bucket.rotation_scripts.bucket}/${aws_s3_object.rotation_script.key}"
}

output "rotation_schedule" {
  description = "Database password rotation schedule"
  value       = aws_cloudwatch_event_rule.rotation_schedule.schedule_expression
}
